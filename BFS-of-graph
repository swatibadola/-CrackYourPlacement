//Given a directed graph. The task is to do Breadth First Traversal of this graph starting from 0.

// TIME COMPLEXITY: O(N) + O(2*total no.of edges)
// total no.of nodes = 2*total no.of edges
// SPACE COMPLEXITY: O(3N) ~ O(N)

class Solution {
  public:
    // Function to return Breadth First Traversal of given graph.
    vector<int> bfsOfGraph(int V, vector<int> adj[]) {
        int vis[V] = {0};
        vis[0] = 1;
        queue<int> q;
        q.push(0);
        vector<int> bfs;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            bfs.push_back(node);
            
            for(auto it:adj[node]){
                if(!vis[it]){
                    vis[it] = 1;
                    q.push(it);
                }
            }
        }
        return bfs;
    }
};
